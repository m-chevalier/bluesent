services:
  training-data-producer:
    build:
      context: ./training_producer/
      dockerfile: Dockerfile
    container_name: training_data_producer
    depends_on:
      - kafka-init
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_OUTPUT_TOPIC: llm_training_data_raw
    restart: 'no'

  producer:
    depends_on:
      - kafka-init
      - kafka
    expose:
      - 8000
    build: producer/
    container_name: producer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_OUTPUT_TOPIC: llm-posts
    restart: unless-stopped
    volumes:
      - producer_data:/app/data

  enrichment-agent:
    depends_on:
      - kafka-init
      - qdrant
      - postgres
    build: ./enrichment-agent/
    container_name: enrichment-agent
    environment:
      QDRANT_HOST: http://qdrant:6333
      KAFKA_BROKER: kafka:9092
      TOPIC_NAME: llm-posts
    restart: unless-stopped


  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped


  grafana:
    image: grafana/grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    restart: unless-stopped


  kafka:
      build: kafka/
      container_name: kafka
      ports:
        - "9092:29092"
        - "9093:9093"
      environment:
        # Kafka KRaft Config
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        KAFKA_NODE_ID: 1
        KAFKA_PROCESS_ROLES: broker,controller
        KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_NUM_PARTITIONS: 1
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      restart: unless-stopped


  kafka-init:
    image: apache/kafka:3.7.0
    depends_on:
      - kafka
    entrypoint: [ "sh", "-c" ]
    command: >
      "
      echo 'Waiting for Kafka to be ready...' &&
      while ! nc -z kafka 9092; do sleep 1; done &&
      echo 'Kafka is up. Creating topics...' &&
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic __consumer_offsets --partitions 50 --replication-factor 1 &&
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic llm-posts --replication-factor 1 --partitions 1 &&
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic llm-embeddings-enriched --replication-factor 1 --partitions 1 &&
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic llm_training_data_raw --replication-factor 1 --partitions 1
      "

  kafka-ui:
    depends_on:
      - kafka
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - AUTH_TYPE="LOGIN_FORM"
      - SPRING_SECURITY_USER_NAME=${KAFKA_UI_LOGIN}
      - SPRING_SECURITY_USER_PASSWORD=${KAFKA_UI_PASSWORD}
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333" # HTTP/REST API & Web UI
      - "6334:6334" # gRPC API
    volumes:
      - qdrant_storage:/qdrant/storage
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: unless-stopped

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo
    restart: unless-stopped

volumes:
  qdrant_storage: # Defines the named volume for Qdrant data
  postgres_data: # Defines the named volume for Postgres data
  producer_data: # Defines the named volume for Producer data
  mongo_data:
